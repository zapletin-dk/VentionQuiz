import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResult;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import participant.User;
import utils.PropertiesUtil;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class QuizBot extends TelegramLongPollingBot {
    private final String BOT_TOKEN = PropertiesUtil.getBotToken();
    private final String BOT_USERNAME = PropertiesUtil.getBotUsername();
    private final String GAME_URL = PropertiesUtil.getGameUrl();
    private final Map<Long, User> users = new ConcurrentHashMap<>();
    private final static Logger logger = LogManager.getLogger(QuizBot.class);
    private final Set<Long> newUsers = new HashSet<>();

    @Override
    public String getBotUsername() {
        return BOT_USERNAME;
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            String username = update.getMessage().getFrom().getUserName() != null
                    ? update.getMessage().getFrom().getUserName()
                    : update.getMessage().getFrom().getFirstName();

            if (users.putIfAbsent(chatId, new User(username)) != null || !newUsers.add(chatId)) {
                logger.info("User already registered or interacted: {} with chatId: {}", username, chatId);
            } else {
                sendWelcomeMessage(chatId, username);
                logger.info("New user registered: {} with chatId: {}", username, chatId);
            }

            if (messageText.equals("/startquiz")) {
                sendWebAppButton(chatId);
                logger.info("User with chatId: {} started quiz", username);
            }
        } else if (update.hasInlineQuery()) {
            logger.info("Received inline query");
            handleInlineQuery(update);
        } else if (update.hasMessage() && update.getMessage().getWebAppData() != null) {
            Long chatId = update.getMessage().getChatId();
            String webAppData = null;
            try {
                if (update.getMessage().getWebAppData() != null) {
                    webAppData = update.getMessage().getWebAppData().getData();
                    logger.debug("WebAppData received: {}", webAppData);
                } else {
                    logger.warn("WebAppData not found for chatId: {}", chatId);
                    sendMessage(chatId, "–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∏–∑ Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
                    return;
                }

                int score = Integer.parseInt(webAppData.split("\"score\":")[1].replaceAll("[^0-9]", ""));
                users.get(chatId).setScore(score);
                logger.info("Quiz completed for chatId: {} with score: {}", chatId, score);
                sendMessage(chatId, "–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! –í–∞—à —Å—á—ë—Ç: " + score);
            } catch (Exception e) {
                logger.error("Error processing webAppData: {}", e.getMessage(), e);
                sendMessage(chatId, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: " + (webAppData != null ? webAppData : "–î–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç") + ". " + e.getMessage());
            }
        }
    }

    private void sendWelcomeMessage(Long chatId, String username) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(String.format(
                "–ü—Ä–∏–≤–µ—Ç, %s! üëã\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–±–æ—Ç! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.\n" +
                        "- –û—Ç–∫—Ä–æ–π –∫–≤–∏–∑ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.\n" +
                        "- –£ —Ç–µ–±—è –±—É–¥–µ—Ç 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.\n" +
                        "- –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∑–Ω–∞–µ—à—å —Å–≤–æ–π —Å—á—ë—Ç!\n\n–ù–∞–∂–º–∏ '–û—Ç–∫—Ä—ã—Ç—å –∫–≤–∏–∑', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                username
        ));
        try {
            execute(message);
            logger.info("Welcome message sent to chatId: {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Failed to send welcome message to chatId: {} - {}", chatId, e.getMessage(), e);
        }
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
            logger.info("Message: {} sent to chatId: {}", message, chatId);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendWebAppButton(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û—Ç–∫—Ä–æ–π—Ç–µ –∫–≤–∏–∑ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!");

        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        List<KeyboardRow> keyboard = new ArrayList<>();
        KeyboardRow row = new KeyboardRow();
        KeyboardButton button = new KeyboardButton();
        button.setText("–û—Ç–∫—Ä—ã—Ç—å –∫–≤–∏–∑");
        button.setWebApp(new WebAppInfo(GAME_URL));
        row.add(button);
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        message.setReplyMarkup(keyboardMarkup);

        try {
            execute(message);
            logger.info("WebApp button sent to chatId: {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("Failed to send WebApp button: {}", e.getMessage(), e);
        }
    }

    private void handleInlineQuery(Update update) {
        String query = update.getInlineQuery().getQuery();
        String queryId = update.getInlineQuery().getId();

        List<InlineQueryResult> results = new ArrayList<>();

        InlineQueryResultArticle articleResult = new InlineQueryResultArticle();
        articleResult.setId(UUID.randomUUID().toString());
        articleResult.setTitle("–ò–≥—Ä–∞—Ç—å –≤ –∫–≤–∏–∑!");
        articleResult.setDescription("–ü—Ä–æ–π–¥–∏ –∫–≤–∏–∑ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∑–∞ 15 —Å–µ–∫—É–Ω–¥!");
        articleResult.setInputMessageContent(
                new InputTextMessageContent("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑! @VentionQuizUZBot")
        );
        InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText("–û—Ç–∫—Ä—ã—Ç—å –∫–≤–∏–∑");
        button.setWebApp(new WebAppInfo(GAME_URL)); // –£–∫–∞–∑—ã–≤–∞–µ–º URL Mini App
        row.add(button);
        keyboard.add(row);
        inlineKeyboardMarkup.setKeyboard(keyboard);

        articleResult.setReplyMarkup(inlineKeyboardMarkup); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º InlineKeyboardMarkup
        results.add(articleResult);

        AnswerInlineQuery answerInlineQuery = new AnswerInlineQuery();
        answerInlineQuery.setInlineQueryId(queryId);
        answerInlineQuery.setResults(results);
        answerInlineQuery.setCacheTime(0); // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ

        try {
            execute(answerInlineQuery);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
}